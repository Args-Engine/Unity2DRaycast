// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
Texture2D<float4> _SkyBoxTexture;
SamplerState sampler_SkyBoxTexture;



static const float PI = 3.14159f;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

struct Ray
{
	float3 origin;
	float3 direction;
};
struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
};
RayHit CreateRay()
{
	RayHit hit;
	hit.position = float3(0, 0, 0);
	hit.distance = 1.#INF;
	hit.normal = float3(0, 0, 0);
	return hit;
}


Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;

	return ray;
}
Ray CreateCameraRay(float2 uv)
{
	// Transform the camera origin to world space
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

	// Invert the perspective projection of the view-space position
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
	// Transform the direction from camera to world space and normalize
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);
	return CreateRay(origin, direction);

}
//sphere is a float4( position, radius) => xyz values are pos, w is the radius
void IntersectSphere(Ray ray, inout RayHit hit, float4 sphere)
{
	//direction vector
	float3 d = ray.origin - sphere.xyz;
	float p1 = -dot(ray.direction, d);
	float p2sqrt = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
	//no intersection
	if (p2sqrt < 0) return;
	float p2 = sqrt(p2sqrt);
	//ray has up to 2 intersection points with a sphere
	//pick valid 
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	//check if t is valid & smaller than previous hit
	if (t > 0 && t < hit.distance)
	{
		hit.distance = t;
		hit.position = ray.origin + ray.direction * t;
		hit.normal = normalize(hit.position - sphere.xyz);
	}

}
void IntersectGroundPlane(Ray ray, inout RayHit hit)
{
	float t = -ray.origin.y / ray.direction.y;
	if (t > 0 && t < hit.distance)
	{
		hit.distance = t;
		hit.position = ray.origin + t * ray.direction;
		hit.normal = float3(0, 1, 0);
	}
}
RayHit Trace(Ray ray)
{
	RayHit hit = CreateRay();
	//intersect with ground plane
	IntersectGroundPlane(ray, hit);
	//intersect with a sphere at position (0, 3, 0) with radius 1
	IntersectSphere(ray, hit, float4(0, 3.0f, 0, 1.0f));
	return hit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
	if (hit.distance < 1.#INF)
	{
		return hit.normal * 0.5f + 0.5f;
	}
	else
	{
		//else return sky Color
		return float3(0.35f, 0.45f, 0.65f);
	}
}



[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	uint width, height;
	Result.GetDimensions(width, height);

	float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
	Ray ray = CreateCameraRay(uv);

	RayHit hit = Trace(ray);
	float3 result = Shade(ray, hit);

	Result[id.xy] = float4(result, 1);
	//Result[id.xy] = float4(result, 1);
	//Result[id.xy] = float4(ray.direction, 1);
	//Result[id.xy] = float4(ray.origin, 1);

	//float theta = acos(ray.direction.y) / -PI;
	//float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;


	//Result[id.xy] = float4(ray.direction * 0.5f + 0.5f, 1.0f);
	//Result[id.xy] = float4(_SkyBoxTexture.SampleLevel(sampler_SkyBoxTexture, float2(phi, theta), 0));

}
