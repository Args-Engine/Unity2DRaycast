// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
Texture2D<float4> _SkyBoxTexture;
SamplerState sampler_SkyBoxTexture;

float2 _PixelOffset;
float4 _DirLight;
float3 _SkyColor;
float _Seed;
float2 _Pixel;

static const int MAX_BOUNCES = 8;
static const float PI = 3.14159265f;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

struct Sphere
{
	float3 position;
	float radius;
	float3 albedo;
	float3 specular;
	float smoothness;
	float3 emission;
};
StructuredBuffer<Sphere> _Spheres;

struct Ray
{
	float3 origin;
	float3 direction;
	float3 energy;
};
struct AABB
{
	float3 posMin;
	float3 posMax;
	float3 posCenter;
	float3 albedo;
	float3 specular;
};
struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
	float3 albedo;
	float3 specular;
	float smoothness;
	float3 emission;
};
//returns random number
float Rand()
{
	float result = frac(sin(_Seed / 100.0f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
	_Seed += 1.0f;
	return result;
}
//translates smoothness into useable alpha 
float SmoothnessToAlpha(float s)
{
	return pow(100.0f, s * s);
}
//returns energy of Color by averaging them together
float Energy(float3 Color)
{
	return (dot(Color, 1.0f / 3.0f));
}
float3x3 GetTangentSpace(float3 normal)
{
	//pick cross prodcut vector
	float3 helper = float3(1, 0, 0);
	if (abs(normal.x) > 0.99f);
	helper = float3(0, 0, 1);

	float3 tangent = normalize(cross(normal, helper));
	float3 binormal = normalize(cross(normal, tangent));
	return float3x3(tangent, binormal, normal);
}
float3 SampleHemisphere(float3 normal, float alpha)
{
	//random to the power of 1 if alpha =0, to the power of 0.5 if alpha = 1
	float cosTheta = pow(Rand(), 1.0f / (alpha + 1.0f));

	float sinTheta = sqrt(max(0.0f, 1.0f - cosTheta * cosTheta));
	float phi = 2 * PI * Rand();
	float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
	return mul(tangentSpaceDir, GetTangentSpace(normal));
}
//clamps dot product to [0,1]
float sdot(float3 x, float3 y, float f = 1.0f)
{
	return saturate(dot(x, y) * f);
}


RayHit CreateRay()
{
	RayHit hit;
	hit.position = float3(0, 0, 0);
	hit.distance = 1.#INF;
	hit.normal = float3(0, 0, 0);
	hit.smoothness = 0;
	hit.emission = float3(0, 0, 0);
	return hit;
}


Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	ray.energy = float3(1.0f, 1.0f, 1.0f);
	return ray;
}
Ray CreateCameraRay(float2 uv)
{
	// Transform the camera origin to world space
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

	// Invert the perspective projection of the view-space position
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
	// Transform the direction from camera to world space and normalize
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);
	return CreateRay(origin, direction);
}
//sphere is a float4( position, radius) => xyz values are pos, w is the radius

void IntersectAABB(Ray ray, inout RayHit hit, AABB box)
{
	float tMin = 0;
	float tMax = 1.#INF;
	//iterate all axis
	for (int i = 0; i < 3; i++)
	{
		//check if ray is parallel to axis
		if (abs(ray.direction[i] < 0.001f))
		{
			//if parallel && origin outside of bounds there is no intersection
			if (ray.origin[i] < box.posMin[i] || ray.origin[i] > box.posMax[i]) return;
		}
		else
		{
			float ood = 1.0f / ray.direction[i];
			float t1 = (box.posMin[i] - ray.origin[i]) * ood;
			float t2 = (box.posMax[i] - ray.origin[i]) * ood;

			//Flip t1 && t2 if dir is negative
			if (ood < 0.0)
			{
				float temp = t2;
				t2 = t1;
				t1 = temp;
			}

			tMin = t1 > tMin ? t1 : tMin;

			tMax = t2 < tMax ? t2 : tMax;



			/*	float temp1 = min(t1, t2);
				tMin = max(tMin, temp1);

				float temp2 = max(t1, t2);
				tMax = min(tMax, temp2);*/
			if (tMin > tMax) return;
		}
		//check if t is smaller than previous hit
		if (tMin > 0 && tMin < hit.distance)
		{
			hit.distance = tMin;
			hit.position = ray.origin + ray.direction * tMin;
			//hit.normal = normalize(hit.position - box.posCenter);
			hit.albedo = box.albedo;
			hit.specular = box.specular;
		}

	}
}
void IntersectSphere(Ray ray, inout RayHit hit, Sphere sphere)
{
	//direction vector
	float3 d = ray.origin - sphere.position.xyz;
	float p1 = -dot(ray.direction, d);
	float p2sqrt = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
	//no intersection
	if (p2sqrt < 0) return;
	float p2 = sqrt(p2sqrt);
	//ray has up to 2 intersection points with a sphere, pick valid intersection point
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	//check if t is valid & smaller than previous hit
	if (t > 0 && t < hit.distance)
	{
		hit.distance = t;
		hit.position = ray.origin + ray.direction * t;
		hit.normal = normalize(hit.position - sphere.position);
		hit.albedo = sphere.albedo;
		hit.specular = sphere.specular;
		hit.smoothness = sphere.smoothness;
		hit.emission = sphere.emission;
	}
}
void IntersectGroundPlane(Ray ray, inout RayHit hit)
{
	float t = -ray.origin.y / ray.direction.y;
	if (t > 0 && t < hit.distance)
	{
		hit.distance = t;
		hit.position = ray.origin + t * ray.direction;
		hit.normal = float3(0, 1, 0);
		hit.albedo = float3(0.2f, 0.2f, 0.2f);
		hit.specular = float3(0.1f, 0.1f, 0.1f);
		hit.smoothness = 0.5f;
		hit.emission = float3(0, 0, 0);
	}
}
RayHit Trace(Ray ray)
{
	RayHit hit = CreateRay();
	//intersect with ground plane
	//IntersectGroundPlane(ray, hit);

	//AABB box;
	//box.posMin = float3(0.0f, 0.0f, 0.0f);
	//box.posMax = float3(2.0f, 1.0f, 0.5f);
	//box.posCenter = box.posMax - box.posMin;
	//box.albedo = float3(1, 0, 0);
	//box.specular = float3(0.6f, 0.6f, 0.6f);
	//IntersectAABB(ray, hit, box);
	//trace spheres

	uint sphereCount, stride;
	_Spheres.GetDimensions(sphereCount, stride);
	for (uint i = 0; i < sphereCount; i++)
	{
		IntersectSphere(ray, hit, _Spheres[i]);
	}
	return hit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
	if (hit.distance < 1.#INF)
	{
		//hit.albedo = min(1.0f - hit.specular, hit.albedo);
		//return hit.specular;
		float specChance = Energy(hit.specular);
		float diffChance = Energy(hit.albedo);
		float sum = specChance + diffChance;

		specChance /= sum;
		diffChance /= sum;

		float roulette = Rand();

		ray.origin = hit.position + hit.normal * 0.001f;

		if (roulette > specChance)
		{
			float alpha = SmoothnessToAlpha(hit.smoothness);
			//spec reflection
			
			ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
			//ray.direction = reflect(ray.direction, hit.normal);
			float f = (alpha + 2) / (alpha + 1);
			ray.energy *= (1.0f / specChance) * 2 * hit.albedo * sdot(hit.normal, ray.direction, f);
		}
		else
		{
			//diffuse reflection
			ray.direction = SampleHemisphere(hit.normal, 1.0f);
			//ray.energy *= (1.0f / diffChance) * 2 * hit.albedo * sdot(hit.normal, ray.direction);
			ray.energy *= (1.0f / diffChance) * hit.albedo;
		}

		return hit.emission;
		return 0.0f;
	}
	else
	{
		//else hit with skybox, skybox does not reflect => energy=0
		ray.energy = 0.0f;
		// Sample the skybox and write it
		float theta = acos(ray.direction.y) / -PI;
		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;

		return _SkyBoxTexture.SampleLevel(sampler_SkyBoxTexture, float2(phi, theta), 0).xyz;

		return _SkyColor;
	}
}



[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	uint width, height;
	Result.GetDimensions(width, height);

	float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
	Ray ray = CreateCameraRay(uv);
	//Result[id.xy] = float4(ray.direction, 1);
	_Pixel = id.xy;
	/*RayHit hit = Trace(ray);
	float3 result = Shade(ray, hit);*/

	float3 result = float3(0, 0, 0);
	for (int i = 0; i < MAX_BOUNCES; i++)
	{
		RayHit hit = Trace(ray);
		result += ray.energy * Shade(ray, hit);


		//	result += Shade(ray, hit);
		if (!any(ray.energy))
			break;
	}

	Result[id.xy] = float4(result, 1);

}
